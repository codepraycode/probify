
generator client {
  provider = "prisma-client-js"
  output   = "../src/db/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ExerciseSession {
  id        String          @id @default(cuid())
  duration  Int             // Total duration in seconds
  questions Int             // Total number of questions
  topics    String[]        // Array of topic strings
  type      QuestionType[]  // Array of question types

  report    ExerciseReport? @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId  String?         @unique

  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model ExerciseReport {
  id         String           @id @default(cuid())
  score      Int
  total      Int
  accuracy   Float            // e.g., 75.5 for 75.5%

  duration    Json             // JSON blob of duration
  answers    Json             // JSON blob of all submitted answers
  topics    Json             // JSON blob of topics breakdown
  types    Json             // JSON blob of question types breakdown

  exercise    ExerciseSession? @relation
  createdAt  DateTime         @default(now())

  User User[]
}

enum QuestionType {
  mcq
  fill
}


model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  passwordHash   String   // Assuming you handle auth manually
  avatarUrl      String?  // Optional profile image
  // role           Role     @default(STUDENT)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Optional profile fields
  username       String?  @unique
  bio            String?
  school         String?
  gradeLevel     String?
  country        String?
  streak         Int      @default(0)
  completedTopics TopicProgress[]
  exerciseReports ExerciseReport[]

  @@map("users")
}

model TopicProgress {
  id         String   @id @default(cuid())
  topicSlug  String
  completed  Boolean  @default(false)
  score      Int
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  completedAt DateTime?
}