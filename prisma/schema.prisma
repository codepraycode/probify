
generator client {
  provider = "prisma-client-js"
  output   = "../src/db/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ExerciseSession {
  id        String          @id @default(cuid())
  duration  Int             // Duration in seconds
  questions Int             // Total questions attempted
  topics    String[]        // Topic slugs covered
  type      QuestionType[]  // Question types included
  
  // Relationships
  report    ExerciseReport? @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId  String?         @unique
  userId    String          // Link to user who completed the exercise
  // user      User            @relation(fields: [userId], references: [id])
  
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([userId]) // For faster user queries
  Topic Topic[]
  User User[]
}

model ExerciseReport {
  id         String           @id @default(cuid())
  score      Int              // Points earned
  total      Int              // Max possible points
  accuracy   Float            // Percentage correct (e.g. 75.5)
  
  // Detailed analytics
  duration    Json            // Time spent per question
  answers    Json             // User's answers
  topics     Json             // Performance by topic
  types      Json             // Performance by question type
  
  // Relationships
  exercise   ExerciseSession? @relation
  userId     String           // Denormalized for easier queries
  user       User             @relation(fields: [userId], references: [id])
  
  createdAt  DateTime         @default(now())

  @@index([userId]) // For faster user queries
}

enum QuestionType {
  mcq
  fill
}


model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  passwordHash   String   // Assuming you handle auth manually
  avatarUrl      String?  // Optional profile image
  // role           Role     @default(STUDENT)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Optional profile fields
  username       String?  @unique
  bio            String?
  school         String?
  gradeLevel     String?
  country        String?
  streak         Int      @default(0)
  completedTopics TopicProgress[]
  // Removed duplicate field definition

  // Exercise relationships
  exerciseSessions ExerciseSession[]
  exerciseReports  ExerciseReport[]

  @@map("users")
}

model TopicProgress {
  id           String   @id @default(cuid())
  topicSlug    String
  completed    Boolean  @default(false)
  completedAt  DateTime?
  score        Int?     // Optional scoring (e.g., 0-100)
  userId       String
  user         User     @relation(fields: [userId], references: [id])

  topic   Topic    @relation(fields: [topicSlug], references: [slug])

  @@unique([userId, topicSlug]) // Ensures one record per user-topic pair
}
model Module {
  id          String   @id @default(uuid())
  slug        String   @unique
  title       String
  description String
  order       Int      @default(0)
  locked      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 1-to-Many: One Module has many Topics
  topics      Topic[]

  @@map("modules")
}

model Topic {
  id          String   @id @default(uuid())
  slug        String   @unique
  title       String
  description String
  difficulty  String?
  tags        String[]
  locked      Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign Key
  moduleId    String?
  
  // Relation
  module      Module?  @relation(fields: [moduleId], references: [id])
  exercises   ExerciseSession[]
  progress    TopicProgress[]

  @@index([moduleId]) // Improves query performance
}